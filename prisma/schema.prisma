// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model LearningGoal {
  id          String    @id @default(cuid())
  title       String
  description String?
  tags        String[]
  deadline    DateTime?
  progress    Int       @default(0)
  status      String    @default("active") // active, completed, paused, cancelled
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks     Task[]
  aiContent AIContent[]

  @@map("learning_goals")
}

model User {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  emailVerified Boolean  @default(false)
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  bio           String?
  avatar        String?

  // Better Auth relationships
  sessions      Session[]
  accounts      Account[]
  verifications Verification[]

  // Learning goals relationship
  learningGoals LearningGoal[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@unique([providerId, accountId])
  @@map("accounts")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("verifications")
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  completed   Boolean   @default(false)
  priority    String    @default("medium") // low, medium, high
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  learningGoalId String
  learningGoal   LearningGoal @relation(fields: [learningGoalId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model AIContent {
  id        String   @id @default(cuid())
  type      String // learning_path, quiz, summary
  title     String
  content   String // JSON string containing the AI-generated content
  metadata  Json? // Additional metadata like difficulty, topics, etc.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  learningGoalId String
  learningGoal   LearningGoal @relation(fields: [learningGoalId], references: [id], onDelete: Cascade)

  @@map("ai_content")
}
